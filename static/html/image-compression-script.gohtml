{{ define "browser-image-compression-script" }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const fileInput = document.getElementById('photos');
        const preview = document.getElementById('preview');
        const fileCount = document.getElementById('fileCount');
        const totalSize = document.getElementById('totalSize');
        const uploadForm = document.getElementById('uploadForm');
        const submitBtn = document.getElementById('submitBtn');
        const errorMessage = document.getElementById('errorMessage');
        const uploadProgress = document.getElementById('uploadProgress');
        const progressBar = uploadProgress.querySelector('progress');
        const progressText = document.getElementById('progressText');

        const MAX_FILE_SIZE = 0.8 * 1024 * 1024; 
        const MAX_TOTAL_SIZE = 10 * 1024 * 1024;  
        const PREVIEW_MAX_WIDTH = window.innerWidth > 768 ? 400 : Math.min(window.innerWidth - 40, 400); // Responsive preview size

        fileInput.addEventListener('change', async function(e) {
            errorMessage.textContent = '';
            preview.innerHTML = '';
            
            const files = Array.from(e.target.files);
            fileCount.textContent = `${files.length} file${files.length !== 1 ? 's' : ''} selected`;
            
            // Calculate and display total size
            const initialTotalSize = files.reduce((sum, file) => sum + file.size, 0);
            totalSize.textContent = `${(initialTotalSize / 1024 / 1024).toFixed(2)} MB`;
            
            // Validate total size with more conservative buffer
            if (initialTotalSize > MAX_TOTAL_SIZE * 4) {
                errorMessage.textContent = `Total size too large. Please select less than ${MAX_TOTAL_SIZE / 1024 / 1024} MB total.`;
                return;
            }

            // Process and preview each file
            for (const file of files) {
                try {
                    const processedFile = await processImageFile(file);
                    previewFile(processedFile, PREVIEW_MAX_WIDTH);
                } catch (error) {
                    console.error('Error processing file:', error);
                    errorMessage.textContent = `Error processing ${file.name}: ${error.message}`;
                }
            }
        });

        async function processImageFile(file) {
            // Skip processing if file is already small enough and not HEIC
            if (file.size <= MAX_FILE_SIZE && !isHeicFile(file)) {
                return file;
            }

            // Convert HEIC to JPEG if needed (with lower quality)
            if (isHeicFile(file)) {
                file = await convertHeicToJpeg(file);
            }

            // Compress the image with more aggressive settings
            return await compressImage(file, {
                maxWidth: 1200, 
                maxHeight: 1200, 
                quality: 0.5, 
                maxSizeMB: MAX_FILE_SIZE / 1024 / 1024,
                useWebWorker: true 
            });
        }

        function isHeicFile(file) {
            return file.type === 'image/heic' || file.type === 'image/heif' || 
                   file.name.toLowerCase().endsWith('.heic') || 
                   file.name.toLowerCase().endsWith('.heif');
        }

        async function convertHeicToJpeg(file) {
            if (typeof heic2any === 'undefined') {
                throw new Error('HEIC conversion not supported. Please use JPEG or PNG.');
            }
            
            const result = await heic2any({
                blob: file,
                toType: 'image/jpeg',
                quality: 0.5 
            });
            
            return new File([result], file.name.replace(/\.[^/.]+$/, '.jpg'), {
                type: 'image/jpeg',
                lastModified: new Date()
            });
        }

        async function compressImage(file, options) {
            // Use browser-image-compression if available
            if (typeof imageCompression !== 'undefined') {
                return await imageCompression(file, options);
            }
            
            // Fallback basic compression using canvas
            return new Promise((resolve) => {
                const img = new Image();
                img.src = URL.createObjectURL(file);
                
                img.onload = () => {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    
                    // Calculate new dimensions
                    let width = img.width;
                    let height = img.height;
                    
                    if (width > options.maxWidth) {
                        height = (height * options.maxWidth) / width;
                        width = options.maxWidth;
                    }
                    
                    if (height > options.maxHeight) {
                        width = (width * options.maxHeight) / height;
                        height = options.maxHeight;
                    }
                    
                    canvas.width = width;
                    canvas.height = height;
                    
                    // Draw and compress
                    ctx.drawImage(img, 0, 0, width, height);
                    
                    canvas.toBlob((blob) => {
                        resolve(new File([blob], file.name, {
                            type: 'image/jpeg',
                            lastModified: new Date()
                        }));
                    }, 'image/jpeg', options.quality);
                };
                
                img.onerror = () => resolve(file); // Fallback to original if error
            });
        }

        function previewFile(file, maxWidth) {
            const imgContainer = document.createElement('div');
            imgContainer.className = 'preview-item';
            imgContainer.style.maxWidth = `${maxWidth}px`; // Keep this as inline style since it's dynamic
            
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            img.className = 'preview-image'; // Optional: if you want to add more specific styles later
            const fileInfo = document.createElement('div');
            fileInfo.className = 'file-info';
            fileInfo.textContent = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
            
            imgContainer.appendChild(img);
            imgContainer.appendChild(fileInfo);
            preview.appendChild(imgContainer);
        }

        uploadForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(uploadForm);
            const files = Array.from(fileInput.files);
            
            // Disable submit button during upload
            submitBtn.disabled = true;
            uploadProgress.style.display = 'block';
            
            try {
                // Process all files first
                const processedFiles = [];
                for (const file of files) {
                    const processedFile = await processImageFile(file);
                    processedFiles.push(processedFile);
                }
                
                // Replace original files with processed ones
                formData.delete('photos');
                processedFiles.forEach(file => {
                    formData.append('photos', file);
                });
                
                // Calculate total size after processing
                const totalSize = processedFiles.reduce((sum, file) => sum + file.size, 0);
                if (totalSize > MAX_TOTAL_SIZE) {
                    throw new Error(`Total size after compression is ${(totalSize / 1024 / 1024).toFixed(2)} MB which exceeds the limit.`);
                }
                
                // Submit with progress tracking
                const xhr = new XMLHttpRequest();
                xhr.upload.onprogress = function(e) {
                    if (e.lengthComputable) {
                        const percent = Math.round((e.loaded / e.total) * 100);
                        progressBar.value = percent;
                        progressText.textContent = `${percent}%`;
                    }
                };
                
                xhr.onload = function() {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        window.location.reload(); // Refresh to show new upload
                    } else {
                        errorMessage.textContent = `Upload failed: ${xhr.statusText}`;
                    }
                };
                
                xhr.onerror = function() {
                    errorMessage.textContent = 'Upload failed. Please try again.';
                };
                
                xhr.open('POST', uploadForm.action, true);
                xhr.send(formData);
                
            } catch (error) {
                errorMessage.textContent = error.message;
                submitBtn.disabled = false;
                uploadProgress.style.display = 'none';
            }
        });
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/heic2any@0.0.3/dist/heic2any.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/browser-image-compression@2.0.0/dist/browser-image-compression.min.js"></script>
{{ end }}
