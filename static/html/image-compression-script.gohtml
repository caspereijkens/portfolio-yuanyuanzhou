{{ define "browser-image-compression-script" }}
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- DOM Element References ---
    const fileInput = document.getElementById('photos');
    const preview = document.getElementById('preview');
    const fileCount = document.getElementById('fileCount');
    const totalSize = document.getElementById('totalSize');
    const uploadForm = document.getElementById('uploadForm');
    const submitBtn = document.getElementById('submitBtn');
    const errorMessage = document.getElementById('errorMessage');
    const uploadProgress = document.getElementById('uploadProgress');
    const progressBar = uploadProgress.querySelector('progress');
    const progressText = document.getElementById('progressText');

    // --- Configuration Constants ---
    const MAX_FILE_SIZE_MB = 0.8;
    const MAX_TOTAL_SIZE_MB = 10;
    const MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;
    const MAX_TOTAL_SIZE = MAX_TOTAL_SIZE_MB * 1024 * 1024;
    const PREVIEW_MAX_WIDTH = window.innerWidth > 768 ? 400 : Math.min(window.innerWidth - 40, 400);

    // --- State Variables ---
    let processedFilesCache = [];
    let previewObjectUrls = [];

    /**
     * Resets the UI and state variables to their initial state.
     */
    const resetUI = () => {
        errorMessage.textContent = '';
        preview.innerHTML = '';
        previewObjectUrls.forEach(url => URL.revokeObjectURL(url));
        previewObjectUrls = [];
        processedFilesCache = [];
        submitBtn.disabled = false; 
        submitBtn.textContent = 'Upload';
        fileCount.textContent = 'No files selected';
        totalSize.textContent = '0 MB';
    };

    /**
     * Handles the file selection event.
     * @param {Event} e The change event from the file input.
     */
    const handleFileSelection = async (e) => {
        resetUI();
        const files = Array.from(e.target.files);

        if (files.length === 0) {
            return;
        }

        fileCount.textContent = `${files.length} file${files.length !== 1 ? 's' : ''} selected`;
        const initialTotalSize = files.reduce((sum, file) => sum + file.size, 0);
        totalSize.textContent = `Initial size: ${(initialTotalSize / 1024 / 1024).toFixed(2)} MB`;

        if (initialTotalSize > MAX_TOTAL_SIZE * 5) {
            errorMessage.textContent = `Total file size is too large. Please select under ${MAX_TOTAL_SIZE_MB * 5} MB.`;
            submitBtn.disabled = true; 
            return;
        }
        
        submitBtn.textContent = 'Processing...';
        submitBtn.disabled = true;

        try {
            const processingPromises = files.map(file => processImageFile(file));
            processedFilesCache = await Promise.all(processingPromises);

            updatePreviews(processedFilesCache);
            
            const finalTotalSize = processedFilesCache.reduce((sum, file) => sum + file.size, 0);
            totalSize.textContent = `Compressed size: ${(finalTotalSize / 1024 / 1024).toFixed(2)} MB`;

            if (finalTotalSize > MAX_TOTAL_SIZE) {
                errorMessage.textContent = `Total size after compression exceeds the ${MAX_TOTAL_SIZE_MB} MB limit.`;
                submitBtn.disabled = true;
            } else {
                submitBtn.disabled = false;
            }

        } catch (error) {
            console.error('Error processing files:', error);
            errorMessage.textContent = `An error occurred during processing: ${error.message}`;
        } finally {
            if (!submitBtn.disabled) {
               submitBtn.textContent = 'Upload';
            }
        }
    };

    /**
     * Processes a single image file: converts HEIC and compresses.
     * @param {File} file The file to process.
     * @returns {Promise<File>} A promise that resolves with the processed file.
     */
    const processImageFile = async (file) => {
        let processedFile = file;
        if (isHeicFile(file)) {
            processedFile = await convertHeicToJpeg(file);
        }

        if (processedFile.size <= MAX_FILE_SIZE) {
            return processedFile;
        }
        
        return compressImage(processedFile, {
            maxWidth: 1200,
            maxHeight: 1200,
            quality: 0.6,
            maxSizeMB: MAX_FILE_SIZE_MB,
            useWebWorker: true
        });
    };
    
    /**
     * Updates the DOM with image previews efficiently.
     * @param {File[]} files The files to preview.
     */
    const updatePreviews = (files) => {
        const fragment = document.createDocumentFragment();
        for (const file of files) {
            const previewData = createPreviewElement(file);
            fragment.appendChild(previewData.container);
            previewObjectUrls.push(previewData.objectUrl);
        }
        preview.appendChild(fragment);
    };

    /**
     * Creates a DOM element for a single file preview.
     * @param {File} file The file to create a preview for.
     * @returns {object} An object with the container and URL.
     * @property {HTMLElement} container The preview element.
     * @property {string} objectUrl The blob URL for the preview image.
     */
    const createPreviewElement = (file) => {
        const objectUrl = URL.createObjectURL(file);
        
        const container = document.createElement('div');
        container.className = 'preview-item';
        container.style.maxWidth = `${PREVIEW_MAX_WIDTH}px`;

        const img = document.createElement('img');
        img.src = objectUrl;
        img.className = 'preview-image';
        img.alt = `Preview of ${file.name}`;

        const fileInfo = document.createElement('div');
        fileInfo.className = 'file-info';
        fileInfo.textContent = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
        
        container.append(img, fileInfo);
        
        return { container: container, objectUrl: objectUrl };
    };

    /**
     * Handles the form submission.
     * @param {Event} e The submit event.
     */
    const handleFormSubmit = async (e) => {
        e.preventDefault();
        
        // MODIFICATION: Removed the check that requires files, allowing the form to be submitted without any.
        /*
        if (processedFilesCache.length === 0) {
            errorMessage.textContent = 'Please select files to upload.';
            return;
        }
        */
        
        submitBtn.disabled = true;
        uploadProgress.style.display = 'block';
        
        try {
            // FIX: Initialize FormData from the form to include all hidden fields.
            const formData = new FormData(uploadForm);

            // FIX: Remove the original, unprocessed files from the form data.
            formData.delete('photos'); 

            // FIX: Append the new, processed files.
            processedFilesCache.forEach(file => {
                formData.append('photos', file, file.name);
            });

            const totalUploadSize = processedFilesCache.reduce((sum, file) => sum + file.size, 0);
            if (totalUploadSize > MAX_TOTAL_SIZE) {
                throw new Error(`Total size after compression is ${(totalUploadSize / 1024 / 1024).toFixed(2)} MB, which exceeds the limit.`);
            }

            const xhr = new XMLHttpRequest();
            xhr.open('POST', uploadForm.action, true);
            
            xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percent = Math.round((event.loaded / event.total) * 100);
                    progressBar.value = percent;
                    progressText.textContent = `${percent}%`;
                }
            };
            
            xhr.onload = () => {
                if (xhr.status >= 200 && xhr.status < 300) {
                    window.location.reload();
                } else {
                    // Try to get a more specific error message from the server response
                    errorMessage.textContent = `Upload failed: ${xhr.statusText || 'Bad Request'}`;
                }
            };
            
            xhr.onerror = () => {
                errorMessage.textContent = 'Upload failed due to a network error. Please try again.';
                submitBtn.disabled = false;
                uploadProgress.style.display = 'none';
            };
            
            xhr.send(formData);

        } catch (error) {
            errorMessage.textContent = error.message;
            submitBtn.disabled = false;
            uploadProgress.style.display = 'none';
        }
    };

    // --- Utility Functions ---

    const isHeicFile = (file) => /\.(heic|heif)$/i.test(file.name) || /image\/(heic|heif)/.test(file.type);

    const convertHeicToJpeg = async (file) => {
        if (typeof heic2any === 'undefined') {
            throw new Error('HEIC conversion library is not loaded.');
        }
        const resultBlob = await heic2any({ blob: file, toType: 'image/jpeg', quality: 0.7 });
        const newName = file.name.replace(/\.[^/.]+$/, '.jpg');
        return new File([resultBlob], newName, { type: 'image/jpeg', lastModified: Date.now() });
    };

    const compressImage = async (file, options) => {
        if (typeof imageCompression === 'undefined') {
            console.warn('browser-image-compression library not found. Using basic canvas fallback.');
            return canvasFallbackCompress(file, options);
        }
        return imageCompression(file, options);
    };
    
    const canvasFallbackCompress = (file, options) => {
        return new Promise((resolve, reject) => {
            const img = new Image();
            const objectUrl = URL.createObjectURL(file);
            img.src = objectUrl;
            img.onload = () => {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                let width = img.width;
                let height = img.height;
                
                if (width > height) {
                    if (width > options.maxWidth) {
                        height = Math.round(height * options.maxWidth / width);
                        width = options.maxWidth;
                    }
                } else {
                    if (height > options.maxHeight) {
                        width = Math.round(width * options.maxHeight / height);
                        height = options.maxHeight;
                    }
                }
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
                canvas.toBlob(blob => {
                    resolve(new File([blob], file.name, { type: 'image/jpeg', lastModified: Date.now() }));
                }, 'image/jpeg', options.quality || 0.7);
                URL.revokeObjectURL(objectUrl);
            };
            img.onerror = (err) => {
                URL.revokeObjectURL(objectUrl);
                reject(err);
            };
        });
    };

    // --- Event Listeners ---
    fileInput.addEventListener('change', handleFileSelection);
    uploadForm.addEventListener('submit', handleFormSubmit);

    // MODIFICATION: Set initial state on page load.
    resetUI();
});
</script>
<script src="https://cdn.jsdelivr.net/npm/heic2any@0.0.3/dist/heic2any.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/browser-image-compression@2.0.0/dist/browser-image-compression.min.js"></script>
{{ end }}
