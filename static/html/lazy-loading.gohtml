{{ define "lazy-loading-script" }}
<script>
    const visualID = {{ .Visual.ID }};
    let currentPage = 1;
    const photosPerPage = 4;
    let totalPhotos = 0;
    let totalPages = 1;
    let isLoading = false;
    let initialLoadComplete = false;
    let scrollListenerAttached = false;

    async function loadPhotos() {
        if (isLoading || currentPage > totalPages) return;

        try {
            isLoading = true;

            // Load more photos at first
            const effectivePhotosPerPage = initialLoadComplete ? photosPerPage : photosPerPage * 3;

            const response = await fetch(`/photos/visual/${visualID}?page=${currentPage}&per_page=${effectivePhotosPerPage}`);
            if (!response.ok) throw new Error('Failed to load photos');
            
            const data = await response.json();
            totalPhotos = data.pagination.total;
            totalPages = data.pagination.total_pages;
            
            const container = document.getElementById('photos-container');
            
            data.photos.forEach(photo => {
                const photoDiv = document.createElement('div');
                photoDiv.className = 'photo-item';
                photoDiv.innerHTML = `
                    <img src="/fs/${photo.file_path}" alt="Photo" loading="lazy">
                    {{ if .Login }}
                    <form class="delete-photo-form" onsubmit="return confirm('Delete this photo?')">
                        <input type="hidden" name="_method" value="DELETE">
                        <button type="submit" data-photo-id="${photo.id}">Delete</button>
                    </form>
                    {{ end }}
                `;
                container.appendChild(photoDiv);
            
                requestAnimationFrame(() => {
                    photoDiv.classList.add('visible');
                });
            });

            currentPage++;

            // After DOM updates, check if we need to load more
            if (!initialLoadComplete) {
                requestAnimationFrame(checkViewportFill);
            }
        } catch (error) {
            console.error('Error loading photos:', error);
        } finally {
            isLoading = false;
        }
    }

    function checkViewportFill() {
        const docHeight = document.documentElement.scrollHeight;
        const winHeight = window.innerHeight;
        const isScrollable = docHeight > winHeight + 100; // Small buffer

        if (!isScrollable && currentPage <= totalPages) {
            loadPhotos();
        } else {
            if (!initialLoadComplete) {
                initialLoadComplete = true;
                setupScrollListener();
            }
        }
    }

    function setupScrollListener() {
        if (scrollListenerAttached) return;
        scrollListenerAttached = true;

        let ticking = false;

        window.addEventListener('scroll', () => {
            if (!ticking) {
                window.requestAnimationFrame(() => {
                    checkScrollPosition();
                    ticking = false;
                });
                ticking = true;
            }
        });

        window.addEventListener('resize', () => {
            if (initialLoadComplete) {
                requestAnimationFrame(checkViewportFill);
            }
        });
    }

    function checkScrollPosition() {
        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
        const scrollThreshold = 600; // BOOST: increased from 300 to 600

        if (scrollHeight - (scrollTop + clientHeight) < scrollThreshold) {
            loadPhotos();
        }
    }

    // Handle photo deletion
    document.addEventListener('submit', async function(e) {
        if (e.target.classList.contains('delete-photo-form')) {
            e.preventDefault();
            const form = e.target;
            const button = form.querySelector('button[type="submit"]');
            const photoID = button.getAttribute('data-photo-id');
            
            try {
                const response = await fetch(`/photos/${photoID}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    form.closest('.photo-item').remove();

                    // After deletion, recheck viewport
                    if (initialLoadComplete) {
                        requestAnimationFrame(checkViewportFill);
                    }
                } else {
                    alert('Failed to delete photo');
                }
            } catch (error) {
                console.error('Error deleting photo:', error);
                alert('Error deleting photo');
            }
        }
    });

    // Initial setup
    document.addEventListener('DOMContentLoaded', () => {
        loadPhotos();
    });
</script>
{{ end }}
