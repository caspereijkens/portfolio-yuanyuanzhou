{{ define "lazy-loading-script" }}
<script>
    const visualID = {{ .Visual.ID }};
    let currentPage = 1;
    const photosPerPage = 4; // This can stay, our API now respects it
    let totalPages = 1;      // This will be set by the first API call
    let isLoading = false;
    // All other state variables can remain the same.

    async function loadPhotos() {
        if (isLoading || (currentPage > totalPages && totalPages > 0)) return;

        try {
            isLoading = true;

            const response = await fetch(`/api/v1/visuals/${visualID}/photos?page=${currentPage}&per_page=${photosPerPage}`);
            if (!response.ok) throw new Error('Failed to load photos');

            const data = await response.json();
            // This logic is the same, as our new API now provides this structure
            totalPages = data.pagination.total_pages;

            const container = document.getElementById('photos-container');

            data.photos.forEach(photo => {
                const photoDiv = document.createElement('div');
                photoDiv.className = 'photo-item';

                // CHANGED: Update the innerHTML to use the new `thumbnails` object
                // We'll use the small thumbnail for the grid and store the large one
                // in a data attribute for lightbox/fullscreen functionality.
                photoDiv.innerHTML = `
                    <img src="${photo.thumbnails.medium}"
                         data-large-src="${photo.thumbnails.large}"
                         alt="Photo"
                         loading="lazy"
                         onload="this.onload=null; const largeImg = new Image(); largeImg.src=this.dataset.largeSrc; largeImg.onload=() => {this.src=largeImg.src;}"
                         onclick="showLargeImage(this.dataset.largeSrc)">
                    {{ if .Login }}
                    <form class="delete-photo-form" onsubmit="return confirm('Delete this photo?')">
                        <input type="hidden" name="_method" value="DELETE">
                        <button type="submit" data-photo-id="${photo.id}">Delete</button>
                    </form>
                    {{ end }}
                `;
                container.appendChild(photoDiv);

                // This fade-in animation logic is great, no changes needed.
                requestAnimationFrame(() => {
                    photoDiv.classList.add('visible');
                });
            });

            currentPage++;

        } catch (error) {
            console.error('Error loading photos:', error);
        } finally {
            isLoading = false;
        }
    }
    
    // A simple function to open the large image, can be replaced with a proper lightbox
    function showLargeImage(src) {
        window.open(src, '_blank');
    }

    // All the other functions (loadInitialPhotos, checkViewportFill, setupScrollListener,
    // checkScrollPosition, and the delete form handler) can remain EXACTLY THE SAME.
    // They are correctly written and will work perfectly with the updated loadPhotos function.

    async function loadInitialPhotos() {
        for (let i = 0; i < 3; i++) {
            if (currentPage > totalPages && totalPages > 0) break;
            await loadPhotos();
        }
        setupScrollListener();
        requestAnimationFrame(checkViewportFill);
    }
    // ... other unchanged functions ...
    
    function setupScrollListener() {
        window.addEventListener('scroll', checkScrollPosition, { passive: true });
    }

    function checkViewportFill() {
        const container = document.getElementById('photos-container');
        if (container.getBoundingClientRect().bottom < window.innerHeight + 200) {
            loadPhotos();
        }
    }

    function checkScrollPosition() {
        if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 500) {
            loadPhotos();
        }
    }

    document.addEventListener('submit', async function(e) {
        // ... no changes needed in the delete handler logic ...
        if (e.target.classList.contains('delete-photo-form')) {
            e.preventDefault();
            const form = e.target;
            const button = form.querySelector('button[type="submit"]');
            const photoID = button.getAttribute('data-photo-id');

            try {
              const response = await fetch(`/api/v1/visuals/${visualID}/photos/${photoID}`, { method: 'DELETE' });
                if (response.ok) {
                    form.closest('.photo-item')?.remove();
                    requestAnimationFrame(checkViewportFill);
                } else {
                    alert('Failed to delete photo');
                }
            } catch (error) {
                console.error('Error deleting photo:', error);
                alert('Error deleting photo');
            }
        }
    });

    document.addEventListener('DOMContentLoaded', () => {
        loadInitialPhotos();
    });
</script>
{{ end }}
