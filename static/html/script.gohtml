{{ define "script" }}
<script>
    (function() {
        // Configuration
        const config = {
            pdfPath: '/blob/portfolio.pdf',
            workerSrc: 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js',
            maxConcurrentRenders: 4, // Balance between performance and memory
            resolutionScale: window.devicePixelRatio || 1
        };

        // State management
        let pdfDoc = null;
        let renderQueue = [];
        let activeRenders = 0;

        // Initialize PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = config.workerSrc;

        // DOM elements
        const container = document.getElementById('pdfContainer');
        const loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'loading-indicator';
        loadingIndicator.textContent = 'Loading PDF...';
        container.appendChild(loadingIndicator);

        // Handle errors
        function showError(message) {
            loadingIndicator.textContent = `Error: ${message}`;
            loadingIndicator.className = 'loading-indicator error';
            console.error(message);
        }

        // Throttled resize handler
        let resizeTimeout;
        function handleResize() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(renderAllPages, 200);
        }

        // Process render queue
        function processQueue() {
            while (activeRenders < config.maxConcurrentRenders && renderQueue.length > 0) {
                const { pageNum, canvas } = renderQueue.shift();
                activeRenders++;

                pdfDoc.getPage(pageNum).then(page => {
                    renderPage(page, canvas).finally(() => {
                        activeRenders--;
                        processQueue();
                    });
                }).catch(error => {
                    showError(`Failed to load page ${pageNum}: ${error.message}`);
                    activeRenders--;
                    processQueue();
                });
            }
        }

        // Render a single page with proper scaling
        function renderPage(page, canvas) {
            return new Promise((resolve) => {
                requestAnimationFrame(() => {
                    const containerWidth = container.clientWidth - 40; // Account for padding
                    const viewport = page.getViewport({ scale: 1 });
                    const scale = Math.min(containerWidth / viewport.width, 1.5); // Cap scale at 1.5x
                    const scaledViewport = page.getViewport({ scale });

                    // Set canvas dimensions
                    const context = canvas.getContext('2d');
                    canvas.width = scaledViewport.width * config.resolutionScale;
                    canvas.height = scaledViewport.height * config.resolutionScale;
                    canvas.style.width = `${scaledViewport.width}px`;
                    canvas.style.height = `${scaledViewport.height}px`;

                    // Scale context
                    context.scale(config.resolutionScale, config.resolutionScale);

                    // Render with higher quality settings
                    const renderContext = {
                        canvasContext: context,
                        viewport: scaledViewport,
                        intent: 'print' // Higher quality rendering
                    };

                    page.render(renderContext).promise.then(resolve).catch(error => {
                        showError(`Rendering failed: ${error.message}`);
                        resolve();
                    });
                });
            });
        }

        // Render all pages
        function renderAllPages() {
            if (!pdfDoc) return;

            // Clear existing pages
            while (container.firstChild) {
                container.removeChild(container.firstChild);
            }

            // Create new pages
            renderQueue = [];
            for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
                const div = document.createElement('div');
                div.className = 'pdf-page';
                const canvas = document.createElement('canvas');
                div.appendChild(canvas);
                container.appendChild(div);
                renderQueue.push({ pageNum, canvas });
            }

            processQueue();
        }

        // Load PDF document
        pdfjsLib.getDocument(config.pdfPath).promise.then(pdf => {
            pdfDoc = pdf;
            loadingIndicator.remove();
            renderAllPages();

            // Handle window resize
            window.addEventListener('resize', handleResize);
        }).catch(error => {
            showError(`Failed to load PDF: ${error.message}`);
        });

        // Cleanup on unmount if needed
        window.addEventListener('beforeunload', () => {
            window.removeEventListener('resize', handleResize);
            if (pdfDoc) {
                pdfDoc.destroy();
            }
        });
    })();
</script>
{{ end }}
