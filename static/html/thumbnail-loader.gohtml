{{ define "thumbnail-loading-script"}}
<script>
document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".thumb-grid").forEach(async (div) => {
        const visualId = div.dataset.id;
        try {
            const res = await fetch(`/api/v1/visuals/${visualId}/photos?per_page=5`);
            const data = await res.json();
            const thumbs = data.photos;
            const fragment = document.createDocumentFragment(); // Create a document fragment

            for (const photo of thumbs) {
                const container = document.createElement("div");
                container.style.position = "relative";
                container.style.width = "40px";
                container.style.height = "40px";
                container.style.margin = "2px";
                container.style.display = "inline-block";

                const miniImg = document.createElement("img");
                miniImg.src = photo.thumbnails.mini;

                miniImg.loading = "lazy";
                miniImg.title = "Click to view";
                miniImg.style.display = "block";

                miniImg.style.width = "100%";
                miniImg.style.height = "100%";
                miniImg.style.objectFit = "cover";
                miniImg.style.borderRadius = "2px";
                const mediumImg = document.createElement("img");
                mediumImg.src = photo.thumbnails.medium;
                mediumImg.style.position = "absolute";
                mediumImg.style.top = "-50px";
                mediumImg.style.left = "-50px";
                mediumImg.style.width = "150px";
                mediumImg.style.height = "150px";
                mediumImg.style.objectFit = "cover";
                mediumImg.style.display = "none";
                mediumImg.style.zIndex = "10";
                mediumImg.style.border = "1px solid black";
                mediumImg.style.borderRadius = "4px";
                mediumImg.style.loading = "lazy";
                mediumImg.style.pointerEvents = "none";

                // Differentiate between touch and non-touch devices
                const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

                if (isTouchDevice) {
                    container.onclick = () => window.location.href = `/visuals/${visualId}`;
                } else {
                    container.addEventListener("mouseenter", () => {
                        mediumImg.style.display = "block";
                    });
                    container.addEventListener("mouseleave", () => {
                        mediumImg.style.display = "none";
                    });
                    container.onclick = () => window.location.href = `/visuals/${visualId}`;
                }

                container.appendChild(miniImg);
                container.appendChild(mediumImg);
                fragment.appendChild(container); // Append to the fragment
            }
            div.appendChild(fragment); // Append the entire fragment to the div
        } catch (err) {
            console.error("Failed to load thumbnails", err);
            // Optionally display a fallback UI here
        }
    });
});
</script>
{{ end }}